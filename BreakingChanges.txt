Azure Storage Client Library for C++
History of Breaking Changes

Breaking Changes in v0.6:
- Removed following functions:
  - cloud_queue_client::list_queues
  - cloud_queue_client::list_queues_async
  - cloud_table_client::list_tables
  - cloud_table_client::list_tables_async
  - cloud_table::execute_query
  - cloud_table::execute_query_async
- Changed table_entity::set_timestamp to a private method as timestamp is read-only
- Upgraded Casablanca dependency to 2.4.0

Breaking Changes in v0.5:
- Added parameter sequence_number to the following functions:
  - cloud_page_blob::create_async
  - cloud_page_blob::open_write_async
  - cloud_page_blob::upload_from_stream_async
  - cloud_page_blob::upload_from_file_async
  - cloud_page_blob::create
  - cloud_page_blob::open_write
  - cloud_page_blob::upload_from_stream
  - cloud_page_blob::upload_from_file
- The client checks blob lease times and throws std::invalid_argument for invalid lease times.  Previously, this would have been checked on the service
    and azure::storage::storage_exception would have been thrown.

Breaking Changes in v0.4:
- Upgraded Casablanca dependency to 2.3.0
- Changed the exception type in some cases if you upload a blob from a seekable stream but the stream is too short for the desired blob length.
- Used to throw azure::storage::storage_exception in some cases, now throws std::invalid_argument always.

Breaking changes in v0.3:
- Changed namespace to azure::storage.
- The SAS token returned by the get_shared_access_signature functions does not include a question mark (?) prefix.
- The storage_credentials class stores SAS tokens without a question mark (?) prefix.
- Added check to prevent uploading metadata values that are empty or consist entirely of whitespace.
- Removed the constness from the return values of binary_value, datetime_value, guid_value, and string_value functions in entity_property class.
- Removed the constness from the return values of filter_string and select_columns functions in table_query class.
- Changed many functions to accept pass-by-reference arguments or return references as a performance improvement.
- Made some constructors explicit to avoid implicit conversions. This affects these classes:
    canonicalizer, shared_key_blob_queue_canonicalizer, shared_key_lite_blob_queue_canonicalizer,  shared_key_table_canonicalizer, shared_key_lite_table_canonicalizer, 
    sas_authentication_handler, shared_key_authentication_handler, continuation_token, retry_info, retry_policy, cloud_queue_message, cloud_queue_client, 
    basic_common_retry_policy, cloud_client

Breaking changes in v0.2:
- Removed blob_continuation_token typedef (use continuation_token instead).
- Renamed table_entity_property class to entity_property.
- Renamed entity_property_type enum to edm_type.
- Renamed query_payload_format enum to table_payload_format.

Breaking changes in v0.1:
(None)
